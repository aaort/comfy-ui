name: Auto Release

on:
  push:
    branches: [main, master]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/auto-release.yml'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Check if release is needed
        id: check
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found. This will be the first release."
            COMMIT_COUNT=$(git rev-list HEAD --count)
          else
            echo "Latest tag: $LATEST_TAG"
            COMMIT_COUNT=$(git rev-list ${LATEST_TAG}..HEAD --count)
          fi

          echo "Commits since last tag: $COMMIT_COUNT"

          if [ $COMMIT_COUNT -gt 0 ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump
        id: version
        if: steps.check.outputs.should_release == 'true'
        run: |
          # Analyze commit messages to determine version bump
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Get all commit messages since last tag or all commits if no tag
          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
          fi

          # Default to patch bump
          BUMP_TYPE="patch"

          # Check for breaking changes or major keywords
          if echo "$COMMITS" | grep -iE "BREAKING CHANGE|BREAKING:|!:" > /dev/null; then
            BUMP_TYPE="major"
          # Check for feature additions
          elif echo "$COMMITS" | grep -iE "^feat:|feature:" > /dev/null; then
            BUMP_TYPE="minor"
          fi

          echo "Detected bump type: $BUMP_TYPE"

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          if [ "$BUMP_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-and-release:
    needs: check-and-release
    if: needs.check-and-release.outputs.should_release == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Update version in package.json
        run: |
          NEW_VERSION="${{ needs.check-and-release.outputs.new_version }}"
          npm version $NEW_VERSION --no-git-tag-version

          # Commit version bump
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to v$NEW_VERSION [skip ci]"

      - name: Build Electron app
        run: pnpm run build:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ needs.check-and-release.outputs.new_version }}"
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          {
            echo "## What's Changed in v$NEW_VERSION"
            echo ""

            if [ -z "$LATEST_TAG" ]; then
              echo "### Initial Release ðŸŽ‰"
              echo ""
              echo "This is the first release of Cozy UI!"
              echo ""
              echo "### All Features"
              git log --pretty=format:"%s|%an|%h|%H" | grep -iE "^feat:|feature:" | while IFS='|' read -r msg author hash full_hash; do
                clean_msg=$(echo "${msg#*:}" | sed 's/^ *//')
                echo "- $clean_msg ($author) [${hash}](https://github.com/${{ github.repository }}/commit/${full_hash})"
              done || true
              echo ""

              echo "### Recent Commits"
              git log --pretty=format:"- %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" | head -20
            else
              # Categorize commits
              echo "### Features"
              git log ${LATEST_TAG}..HEAD --pretty=format:"%s|%an|%h|%H" | grep -iE "^feat:|feature:" | while IFS='|' read -r msg author hash full_hash; do
                clean_msg=$(echo "${msg#*:}" | sed 's/^ *//')
                echo "- $clean_msg ($author) [${hash}](https://github.com/${{ github.repository }}/commit/${full_hash})"
              done || echo "- No new features"
              echo ""

              echo "### Bug Fixes"
              git log ${LATEST_TAG}..HEAD --pretty=format:"%s|%an|%h|%H" | grep -iE "^fix:|bugfix:" | while IFS='|' read -r msg author hash full_hash; do
                clean_msg=$(echo "${msg#*:}" | sed 's/^ *//')
                echo "- $clean_msg ($author) [${hash}](https://github.com/${{ github.repository }}/commit/${full_hash})"
              done || echo "- No bug fixes"
              echo ""

              echo "### Other Changes"
              git log ${LATEST_TAG}..HEAD --pretty=format:"%s|%an|%h|%H" | grep -viE "^(feat:|feature:|fix:|bugfix:)" | while IFS='|' read -r msg author hash full_hash; do
                echo "- ${msg} ($author) [${hash}](https://github.com/${{ github.repository }}/commit/${full_hash})"
              done || echo "- No other changes"
              echo ""

              # Add statistics
              STATS=$(git diff ${LATEST_TAG}..HEAD --shortstat)
              if [ ! -z "$STATS" ]; then
                echo "### Statistics"
                echo "- $STATS"
                echo ""
              fi

              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v${NEW_VERSION}"
            fi
          } > release_notes.md

          # Display for debugging
          echo "Generated changelog:"
          cat release_notes.md

      - name: Push version bump
        run: |
          git push origin HEAD:main

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-and-release.outputs.new_version }}
          name: Release v${{ needs.check-and-release.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/*.dmg
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-release-v${{ needs.check-and-release.outputs.new_version }}
          path: dist/*.dmg
          retention-days: 30
