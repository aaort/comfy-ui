name: Manual Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix, e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
            # Check if it's a pre-release based on version string
            if [[ "$VERSION" =~ (alpha|beta|rc|preview) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT

          echo "Building version: ${VERSION}"
          echo "Tag: ${TAG}"
          echo "Pre-release: ${IS_PRERELEASE}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Update version in package.json
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Update package.json with the new version
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version

      - name: Build Electron app
        run: pnpm run build:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: List build artifacts
        run: |
          echo "Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "DMG files found:"
          find dist -name "*.dmg" -type f

      - name: Generate changelog
        id: changelog
        run: |
          TAG="${{ steps.version.outputs.tag }}"

          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | grep -v "$TAG" | head -1 || echo "")

          # Check if any tags exist at all
          if [ -z "$PREVIOUS_TAG" ]; then
            ALL_TAGS=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' || echo "")
            if [ -z "$ALL_TAGS" ]; then
              echo "No previous tags found. This will be the first release."
            fi
          fi

          # Generate changelog
          {
            echo "## Release $TAG"
            echo ""

            if [ -z "$PREVIOUS_TAG" ]; then
              echo "### Initial Release 🎉"
              echo ""
              echo "First release of Cozy UI!"
              echo ""
              echo "### All Commits"
              git log --pretty=format:"- %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" | head -50
            else
              echo "### What's Changed"
              echo ""

              # Features
              if [ -z "$PREVIOUS_TAG" ]; then
                FEATURES=$(git log HEAD --pretty=format:"%s|%an|%h|%H" | grep -iE "^feat:|feature:" || true)
              else
                FEATURES=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"%s|%an|%h|%H" | grep -iE "^feat:|feature:" || true)
              fi
              if [ ! -z "$FEATURES" ]; then
                echo "#### 🚀 Features"
                echo "$FEATURES" | while IFS='|' read -r msg author hash full_hash; do
                  clean_msg=$(echo "${msg#*:}" | sed 's/^ *//')
                  echo "- $clean_msg ($author) [${hash}](https://github.com/${{ github.repository }}/commit/${full_hash})"
                done
                echo ""
              fi

              # Bug fixes
              if [ -z "$PREVIOUS_TAG" ]; then
                FIXES=$(git log HEAD --pretty=format:"%s|%an|%h|%H" | grep -iE "^fix:|bugfix:" || true)
              else
                FIXES=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"%s|%an|%h|%H" | grep -iE "^fix:|bugfix:" || true)
              fi
              if [ ! -z "$FIXES" ]; then
                echo "#### 🐛 Bug Fixes"
                echo "$FIXES" | while IFS='|' read -r msg author hash full_hash; do
                  clean_msg=$(echo "${msg#*:}" | sed 's/^ *//')
                  echo "- $clean_msg ($author) [${hash}](https://github.com/${{ github.repository }}/commit/${full_hash})"
                done
                echo ""
              fi

              # Other changes
              if [ -z "$PREVIOUS_TAG" ]; then
                OTHER=$(git log HEAD --pretty=format:"%s|%an|%h|%H" | grep -viE "^(feat:|feature:|fix:|bugfix:|chore:)" || true)
              else
                OTHER=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"%s|%an|%h|%H" | grep -viE "^(feat:|feature:|fix:|bugfix:|chore:)" || true)
              fi
              if [ ! -z "$OTHER" ]; then
                echo "#### 📝 Other Changes"
                echo "$OTHER" | while IFS='|' read -r msg author hash full_hash; do
                  echo "- ${msg} ($author) [${hash}](https://github.com/${{ github.repository }}/commit/${full_hash})"
                done
                echo ""
              fi

              # Statistics
              echo "### 📊 Statistics"
              if [ -z "$PREVIOUS_TAG" ]; then
                STATS=$(git diff --shortstat $(git rev-list --max-parents=0 HEAD)..HEAD)
                echo "- $STATS"
                echo "- Commits: $(git rev-list HEAD --count)"
              else
                STATS=$(git diff ${PREVIOUS_TAG}..HEAD --shortstat)
                echo "- $STATS"
                echo "- Commits: $(git rev-list ${PREVIOUS_TAG}..HEAD --count)"
              fi
              echo ""

              # Contributors
              echo "### 👥 Contributors"
              if [ -z "$PREVIOUS_TAG" ]; then
                git log HEAD --pretty=format:"%an" | sort | uniq | while read author; do
                  echo "- @$author"
                done
              else
                git log ${PREVIOUS_TAG}..HEAD --pretty=format:"%an" | sort | uniq | while read author; do
                  echo "- @$author"
                done
                echo ""
                echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${TAG}"
              fi
              echo ""
            fi
          } > release_notes.md

          echo "Generated release notes:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.version.outputs.is_prerelease == 'true' }}
          files: |
            dist/*.dmg
          fail_on_unmatched_files: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts for debugging
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-artifacts-${{ steps.version.outputs.tag }}
          path: |
            dist/*.dmg
            release_notes.md
          retention-days: 30
